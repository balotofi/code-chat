
datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
    previewFeatures = "relationalIntegrity"
}


model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(DEVELOPER)
    accounts      Account[]
    sessions      Session[]
}

model Comment{
    commentID String   @id @default(auto()) @map("_id") @db.ObjectId
    content   String
    length    Int
    published Boolean  @default(false)
    createdAt DateTime @default(now())
    author    User?    @relation(fields: [authorId], references: [id])
    authorId  String   @db.ObjectId
}

model CodeReviewRequest{
       createdAt DateTime @default(now())
       reviewID  String   @relation(fields: [authorId], references: [id])
       generatedURL String 
       permalink
       requester (devID)
}

model CodeSnippet{
    snippetID   String   @id @default(auto()) @map("_id") @db.ObjectId
    permalink   URL
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    author User? @relation(fields:[], references:[])
    authorId  String   @db.ObjectId
    reviewedAt  DateTime
    modifiedBy User? @relation() (devID)
    length    Int
    content
}
enum Role {
  DEVELOPER
  REVIEWER
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
